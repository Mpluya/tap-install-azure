---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
  annotations:
    kapp.k14s.io/change-group: "monitoring-app"
spec:
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 56.6.2
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
  interval: 1m0s
  valuesFrom:
    - kind: Secret
      name: kube-prometheus-stack-values
      valuesKey: values.yaml

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kube-prometheus-stack-values
  namespace: tap-install
spec:
  refreshInterval: 60m

  secretStoreRef:
    kind: SecretStore
    name: azure-secret-store

  target:
    name: kube-prometheus-stack-values
    creationPolicy: Owner
    template:
      data:
        values.yaml: |
          prometheus:
            ingress:
              enabled: true
              annotations:
                cert-manager.io/cluster-issuer: letsencrypt-production
              hosts:
                - "prometheus.run-prod.cssa.tapsme.org"
              tls:
                - secretName: prometheus-cert
                  hosts:
                    - "prometheus.run-prod.cssa.tapsme.org"
          grafana:
            adminPassword: "{{ .grafanaPassword  }}"
            ingress:
              enabled: true
              annotations:
                cert-manager.io/cluster-issuer: letsencrypt-production
              hosts:
                - "grafana.run-prod.cssa.tapsme.org"
              tls:
                - secretName: grafana-cert
                  hosts:
                    - "grafana.run-prod.cssa.tapsme.org"
          kube-state-metrics:
            customResourceState:
              enabled: true
              config:
                spec:
                  resources:
                    - groupVersionKind:
                        group: accelerator.apps.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: Fragment
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                      metricNamePrefix: ""
                      metrics:
                        - name: accelerator_fragment_status
                          help: App Accelerator Fragment status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions, "[type=RepositoryReady]"]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: accelerator.apps.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: Accelerator
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                      metricNamePrefix: ""
                      metrics:
                        - name: accelerator_status
                          help: App Accelerator status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions, "[type=RepositoryReady]"]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: apis.apps.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: APIDescriptor
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        workload: [metadata, labels, carto.run/workload-name]
                      metricNamePrefix: ""
                      metrics:
                        - name: api_descriptor_status
                          help: API Descriptor status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: serving.knative.dev
                        version: "v1"
                        kind: Revision
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        workload: [metadata, labels, carto.run/workload-name]
                        knative_service: [metadata, labels, serving.knative.dev/service]
                      metricNamePrefix: knative
                      metrics:
                        - name: revision_status
                          help: Knative Revision status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: serving.knative.dev
                        version: "v1"
                        kind: Service
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        workload: [metadata, labels, carto.run/workload-name]
                      metricNamePrefix: knative
                      metrics:
                        - name: service_status
                          help: Knative Service status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                          labelsFromPath:
                            url: [status, url]
                    - groupVersionKind:
                        group: serving.knative.dev
                        version: "v1"
                        kind: Configuration
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        workload: [metadata, labels, carto.run/workload-name]
                        applied_conventions: [spec, template, metadata, annotations, conventions.carto.run/applied-conventions]
                      metricNamePrefix: knative
                      metrics:
                        - name: configuration_status
                          help: Knative configurations of workloads
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                          labelsFromPath:
                            latestCreatedRevisionName: [status, latestCreatedRevisionName]
                            latestReadyRevisionName: [status, latestReadyRevisionName]
                    - groupVersionKind:
                        group: servicebinding.io
                        version: "v1beta1"
                        kind: ServiceBinding
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        workload: [metadata, labels, carto.run/workload-name]
                      metricNamePrefix: ""
                      metrics:
                        - name: service_binding_status
                          help: Service Binding status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: services.apps.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: ClusterInstanceClass
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        xrd: [spec, provisioner, crossplane, compositeResourceDefinition]
                        instance_type_kind: [status, instanceType, kind]
                        instance_type_api_group: [status, instanceType, group]
                        instance_type_api_version: [status, instanceType, version]
                      metricNamePrefix: stk
                      metrics:
                        - name: cluster_instance_class_status
                          help: Cluster Instance Class status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: services.apps.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: ResourceClaim
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                      metricNamePrefix: stk
                      metrics:
                        - name: resource_claim_status
                          help: Resource Claim status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: services.apps.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: ResourceClaimPolicy
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                      metricNamePrefix: stk
                      metrics:
                        - name: resource_claim_policy_info
                          help: Resource Claim Policy details
                          each:
                            type: Info
                            info:
                              labelsFromPath:
                                consumingNamespaces: [spec, consumingNamespaces]
                                group: [spec, subject, group]
                                kind: [spec, subject, kind]
                    - groupVersionKind:
                        group: services.apps.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: ClassClaim
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                      metricNamePrefix: stk
                      metrics:
                        - name: class_claim_status
                          help: Class Claim status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: carto.run
                        version: "v1alpha1"
                        kind: Deliverable
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        type: [metadata, labels, apps.tanzu.vmware.com/workload-type]
                        has_tests: [metadata, labels, apps.tanzu.vmware.com/has-tests]
                      metricNamePrefix: cartographer
                      metrics:
                        - name: deliverable_status
                          help: Deliverable status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions, "[type=Ready]"]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: carto.run
                        version: "v1alpha1"
                        kind: Workload
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        workload_type: [metadata, labels, apps.tanzu.vmware.com/workload-type]
                        has_tests: [metadata, labels, apps.tanzu.vmware.com/has-tests]
                      metricNamePrefix: cartographer
                      metrics:
                        - name: workload_status
                          help: Workload status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions, "[type=Ready]"]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: conventions.carto.run
                        version: "v1alpha1"
                        kind: PodIntent
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        workload_name: [metadata, labels, carto.run/workload-name]
                        supplychain: [metadata, labels, carto.run/supply-chain-name]
                        type: [metadata, labels, apps.tanzu.vmware.com/workload-type]
                        has_tests: [metadata, labels, apps.tanzu.vmware.com/has-tests]
                      metricNamePrefix: conventions
                      metrics:
                        - name: podintents_status
                          help: Carto Conventions podintent status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions, "[type=Ready]"]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: source.toolkit.fluxcd.io
                        version: "v1beta2"
                        kind: GitRepository
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        component: [metadata, labels, app.kubernetes.io/component]
                        owner: [metadata, ownerReferences, "0", name]
                        owner_type: [metadata, ownerReferences, "0", kind]
                        workload: [metadata, labels, carto.run/workload-name]
                      metricNamePrefix: flux
                      metrics:
                        - name: git_repository_status
                          help: Git Repository status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: source.apps.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: ImageRepository
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        artifactPath: [status, artifact, path]
                        artifactRevision: [status, artifact, revision]
                        artifactUrl: [status, artifact, url]
                      metricNamePrefix: source
                      metrics:
                        - name: image_repository_status
                          help: Image Repository status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions, "[type=Ready]"]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: tekton.dev
                        version: "v1beta1"
                        kind: TaskRun
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        component: [metadata, labels, app.kubernetes.io/component]
                        owner: [metadata, ownerReferences, "0", name]
                        owner_type: [metadata, ownerReferences, "0", kind]
                        workload: [metadata, labels, carto.run/workload-name]
                        task: [spec, taskRef, name]
                      metricNamePrefix: tekton
                      metrics:
                        - name: task_run_status
                          help: Task Run status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: scanning.apps.tanzu.vmware.com
                        version: "v1beta1"
                        kind: ImageScan
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        scan_template: [spec, scanTemplate]
                        scan_policy: [spec, scanPolicy]
                        image: [spec, registry, image]
                        owner: [metadata, ownerReferences, "0", name]
                        owner_type: [metadata, ownerReferences, "0", kind]
                        workload: [metadata, labels, carto.run/workload-name]
                        scanner_name: [status, scannedBy, scanner, name]
                        scanner_version: [status, scannedBy, scanner, version]
                      metricNamePrefix: scst
                      metrics:
                        - name: image_scan_status
                          help: Image Scan status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions, "[type=Succeeded]"]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: tekton.dev
                        version: "v1beta1"
                        kind: PipelineRun
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        component: [metadata, labels, app.kubernetes.io/component]
                        owner: [metadata, ownerReferences, "0", name]
                        owner_type: [metadata, ownerReferences, "0", kind]
                        workload: [metadata, labels, carto.run/workload-name]
                      metricNamePrefix: tekton
                      metrics:
                        - name: pipeline_run_status
                          help: Pipeline Run status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: eventing.knative.dev
                        version: "v1"
                        kind: Broker
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        broker_class: [metadata, annotations, eventing.knative.dev/broker.class]
                      metricNamePrefix: eventing
                      metrics:
                        - name: broker_status
                          help: Broker status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions, "[type=Ready]"]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                lastTransitionTime: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: eventing.knative.dev
                        version: "v1"
                        kind: Trigger
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        broker: [metadata, labels, eventing.knative.dev/broker]
                      metricNamePrefix: eventing
                      metrics:
                        - name: trigger_status
                          help: Trigger status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions, "[type=Ready]"]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                lastTransitionTime: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: kpack.io
                        version: "v1alpha2"
                        kind: Build
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        component: [metadata, labels, app.kubernetes.io/component]
                        owner: [metadata, ownerReferences, "0", name]
                        owner_type: [metadata, ownerReferences, "0", kind]
                        workload: [metadata, labels, carto.run/workload-name]
                      metricNamePrefix: kpack
                      metrics:
                        - name: build_status
                          help: Build's status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: kpack.io
                        version: "v1alpha2"
                        kind: ClusterBuilder
                      labelsFromPath:
                        name: [metadata, name]
                        repo_tag: [spec, tag]
                      metricNamePrefix: kpack
                      metrics:
                        - name: cluster_builder_status
                          help: Cluster builder status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions, "[type=Ready]"]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: kpack.io
                        version: "v1alpha2"
                        kind: ClusterBuildpack
                      labelsFromPath:
                        name: [metadata, name]
                        image: [spec, image]
                      metricNamePrefix: kpack
                      metrics:
                        - name: cluster_buildpacks_status
                          help: Cluster buildpacks from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions, "[type=Ready]"]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: kpack.io
                        version: "v1alpha2"
                        kind: Image
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        component: [metadata, labels, app.kubernetes.io/component]
                        owner: [metadata, ownerReferences, "0", name]
                        owner_type: [metadata, ownerReferences, "0", kind]
                        workload: [metadata, labels, carto.run/workload-name]
                        latestImage: [status, latestImage]
                        latestBuildRef: [status, latestBuildRef]
                      metricNamePrefix: kpack
                      metrics:
                        - name: image_status
                          help: Image status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: kappctrl.k14s.io
                        version: "*"
                        kind: App
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        succeeded: [status, conditions, "[type=ReconcileSucceeded]", status]
                        failed: [status, conditions, "[type=ReconcileFailed]", status]
                        reconciling: [status, conditions, "[type=Reconciling]", status]
                        oci_image: [spec, fetch, "0", imgpkgBundle, image]
                        git_url: [spec, fetch, "0", git, url]
                        git_ref: [spec, fetch, "0", git, ref]
                      metricNamePrefix: carvel
                      metrics:
                        - name: app
                          help: App info on status and fetch target
                          each:
                            type: Gauge
                            gauge:
                              path: [metadata, creationTimestamp]
                    - groupVersionKind:
                        group: packaging.carvel.dev
                        version: "*"
                        kind: PackageInstall
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        succeeded: [status, conditions, "[type=ReconcileSucceeded]", status]
                        failed: [status, conditions, "[type=ReconcileFailed]", status]
                        reconciling: [status, conditions, "[type=Reconciling]", status]
                        package_refname: [spec, packageRef, refName]
                        package_version: [spec, packageRef, versionSelection, constraints]
                      metricNamePrefix: carvel
                      metrics:
                        - name: packageinstall
                          help: PackageInstall info on status
                          each:
                            type: Gauge
                            gauge:
                              path: [metadata, creationTimestamp]
                    - groupVersionKind:
                        group: apiextensions.k8s.io
                        version: "*"
                        kind: CustomResourceDefinition
                      labelsFromPath:
                        name: [metadata, name]
                        established: [status, conditions, "[type=Established]", status]
                        names_accepted: [status, conditions, "[type=NamesAccepted]", status]
                      metricNamePrefix: crd
                      metrics:
                        - name: status
                          help: CRD info
                          each:
                            type: Gauge
                            gauge:
                              path: [metadata, creationTimestamp]
                    - groupVersionKind:
                        group: bitnami.database.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: XMySQLInstance
                      labelsFromPath:
                        name: [metadata, name]
                        owner: [metadata, labels, "classclaims.services.apps.tanzu.vmware.com/owner-classclaim-name"]
                        compositionRef: [spec, compositionRef, name]
                        compositionRevisionRef: [spec, compositionRevisionRef, name]
                        storage: [metadata, storageGB]
                        established: [status, conditions, type, status, reason]
                        names_accepted: [status, conditions, type, status, reason]
                      metricNamePrefix: bitnami
                      metrics:
                        - name: status
                          help: Bitnami info
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: bitnami.database.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: XPostgreSQLInstance
                      labelsFromPath:
                        name: [metadata, name]
                        owner: [metadata, labels, "classclaims.services.apps.tanzu.vmware.com/owner-classclaim-name"]
                        compositionRef: [spec, compositionRef, name]
                        compositionRevisionRef: [spec, compositionRevisionRef, name]
                        storage: [metadata, storageGB]
                        established: [status, conditions, type, status, reason]
                        names_accepted: [status, conditions, type, status, reason]
                      metricNamePrefix: bitnami
                      metrics:
                        - name: xpostgres_status
                          help: Bitnami info
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: bitnami.database.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: XMongoDBInstance
                      labelsFromPath:
                        name: [metadata, name]
                        owner: [metadata, labels, "classclaims.services.apps.tanzu.vmware.com/owner-classclaim-name"]
                        compositionRef: [spec, compositionRef, name]
                        compositionRevisionRef: [spec, compositionRevisionRef, name]
                        storage: [metadata, storageGB]
                        established: [status, conditions, type, status, reason]
                        names_accepted: [status, conditions, type, status, reason]
                      metricNamePrefix: bitnami
                      metrics:
                        - name: xmongodb_status
                          help: Bitnami info
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: bitnami.messaging.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: XKafkaInstance
                      labelsFromPath:
                        name: [metadata, name]
                        owner: [metadata, labels, "classclaims.services.apps.tanzu.vmware.com/owner-classclaim-name"]
                        compositionRef: [spec, compositionRef, name]
                        compositionRevisionRef: [spec, compositionRevisionRef, name]
                        storage: [metadata, storageGB]
                        established: [status, conditions, type, status, reason]
                        names_accepted: [status, conditions, type, status, reason]
                      metricNamePrefix: bitnami
                      metrics:
                        - name: xkafka_status
                          help: Bitnami info
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: bitnami.caching.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: XRedisCluster
                      labelsFromPath:
                        name: [metadata, name]
                        owner: [metadata, labels, "classclaims.services.apps.tanzu.vmware.com/owner-classclaim-name"]
                        compositionRef: [spec, compositionRef, name]
                        compositionRevisionRef: [spec, compositionRevisionRef, name]
                        storage: [metadata, storageGB]
                      metricNamePrefix: bitnami
                      metrics:
                        - name: status
                          help: Bitnami info
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: bitnami.messaging.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: XRabbitmqCluster
                      labelsFromPath:
                        name: [metadata, name]
                        owner: [metadata, labels, "classclaims.services.apps.tanzu.vmware.com/owner-classclaim-name"]
                        compositionRef: [spec, compositionRef, name]
                        compositionRevisionRef: [spec, compositionRevisionRef, name]
                        storage: [metadata, storageGB]
                      metricNamePrefix: bitnami
                      metrics:
                        - name: status
                          help: Bitnami info
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: sso.apps.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: AuthServer
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        deployment_image: [status, deployments, authServer, image]
                        replicas: [status, deployments, authServer, replicas]
                      metricNamePrefix: sso
                      metrics:
                        - name: appsso_status
                          help: AppSSO info
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions, "[type=Valid]"]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: sso.apps.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: ClusterWorkloadRegistrationClass
                      labelsFromPath:
                        name: [metadata, name]
                        authserver_ref_name: [status, authServerRef, name]
                        authserver_ref_namespace: [status, authServerRef, namespace]
                      metricNamePrefix: sso
                      metrics:
                        - name: cluster_workload_registration_class_status
                          help: Cluster Workload Registration Class status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions, "[type=Ready]"]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: sso.apps.tanzu.vmware.com
                        version: "v1alpha1"
                        kind: ClientRegistration
                      labelsFromPath:
                        name: [metadata, name]
                        namespace: [metadata, namespace]
                        authserver_ref_name: [status, authServerRef, name]
                        authserver_ref_namespace: [status, authServerRef, namespace]
                      metricNamePrefix: sso
                      metrics:
                        - name: client_registrations_status
                          help: Client Registration status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions, "[type=Valid]"]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                message: ["message"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: pkg.crossplane.io
                        version: "v1"
                        kind: Provider
                      labelsFromPath:
                        name: [metadata, name]
                        resourceVersion: [metadata, resourceVersion]
                      metricNamePrefix: crossplane
                      metrics:
                        - name: provider_status
                          help: Crossplane Provider status from conditions
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
                    - groupVersionKind:
                        group: kubernetes.crossplane.io
                        version: "v1alpha1"
                        kind: Object
                      labelsFromPath:
                        name: [metadata, name]
                        owner: [metadata, labels, "crossplane.io/composite"]
                        compositionRef: [spec, compositionRef, name]
                        compositionRevisionRef: [spec, compositionRevisionRef, name]
                        storage: [metadata, storageGB]
                      metricNamePrefix: bitnami
                      metrics:
                        - name: crossplane_object_status
                          help: Bitnami info
                          each:
                            type: Gauge
                            gauge:
                              path: [status, conditions]
                              labelsFromPath:
                                type: ["type"]
                                status: ["status"]
                                reason: ["reason"]
                                last_transition_time: ["lastTransitionTime"]
                              valueFrom: ["status"]
            rbac:
              extraRules:
                - apiGroups:
                    - sso.apps.tanzu.vmware.com
                  resources:
                    - authservers
                    - clientregistrations
                    - clusterworkloadregistrationclasses
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - ""
                  resources:
                    - configmaps
                    - secrets
                    - nodes
                    - pods
                    - services
                    - serviceaccounts
                    - resourcequotas
                    - replicationcontrollers
                    - limitranges
                    - persistentvolumeclaims
                    - persistentvolumes
                    - namespaces
                    - endpoints
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - apps
                  resources:
                    - statefulsets
                    - daemonsets
                    - deployments
                    - replicasets
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - pkg.crossplane.io
                  resources:
                    - providers
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - kubernetes.crossplane.io
                  resources:
                    - objects
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - batch
                  resources:
                    - cronjobs
                    - jobs
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - autoscaling
                  resources:
                    - horizontalpodautoscalers
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - authentication.k8s.io
                  resources:
                    - tokenreviews
                  verbs:
                    - create
                - apiGroups:
                    - authorization.k8s.io
                  resources:
                    - subjectaccessreviews
                  verbs:
                    - create
                - apiGroups:
                    - policy
                  resources:
                    - poddisruptionbudgets
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - certificates.k8s.io
                  resources:
                    - certificatesigningrequests
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - discovery.k8s.io
                  resources:
                    - endpointslices
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - storage.k8s.io
                  resources:
                    - storageclasses
                    - volumeattachments
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - admissionregistration.k8s.io
                  resources:
                    - mutatingwebhookconfigurations
                    - validatingwebhookconfigurations
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - networking.k8s.io
                  resources:
                    - networkpolicies
                    - ingressclasses
                    - ingresses
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - coordination.k8s.io
                  resources:
                    - leases
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - rbac.authorization.k8s.io
                  resources:
                    - clusterrolebindings
                    - clusterroles
                    - rolebindings
                    - roles
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - carto.run
                  resources:
                    - deliverables
                    - workloads
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - conventions.carto.run
                  resources:
                    - podintents
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - source.toolkit.fluxcd.io
                  resources:
                    - gitrepositories
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - source.apps.tanzu.vmware.com
                  resources:
                    - imagerepositories
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - tekton.dev
                  resources:
                    - taskruns
                    - pipelineruns
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - scanning.apps.tanzu.vmware.com
                  resources:
                    - imagescans
                    - sourcescans
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - kpack.io
                  resources:
                    - images
                    - builds
                    - clusterbuilders
                    - clusterbuildpacks
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - packaging.carvel.dev
                  resources:
                    - packagerepositories
                    - packageinstalls
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - kappctrl.k14s.io
                  resources:
                    - apps
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - serving.knative.dev
                  resources:
                    - services
                    - revisions
                    - configurations
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - eventing.knative.dev
                  resources:
                    - triggers
                    - brokers
                    - rabbitmqbrokerconfigs
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - servicebinding.io
                  resources:
                    - servicebindings
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - services.apps.tanzu.vmware.com
                  resources:
                    - clusterinstanceclasses
                    - classclaims
                    - resourceclaims
                    - resourceclaimpolicies
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - apis.apps.tanzu.vmware.com
                  resources:
                    - apidescriptors
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - accelerator.apps.tanzu.vmware.com
                  resources:
                    - accelerators
                    - fragments
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - apiextensions.k8s.io
                  resources:
                    - customresourcedefinitions
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - bitnami.messaging.tanzu.vmware.com
                  resources:
                    - xrabbitmqclusters
                    - xkafkainstances
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - bitnami.database.tanzu.vmware.com
                  resources:
                    - xmysqlinstances
                    - xpostgresqlinstances
                    - xmongodbinstances
                  verbs:
                    - list
                    - watch
                - apiGroups:
                    - bitnami.caching.tanzu.vmware.com
                  resources:
                    - xredisclusters
                  verbs:
                    - list
                    - watch
  data:
    - secretKey: grafanaPassword
      remoteRef:
        key: grafanaPassword
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretExport
metadata:
  name: kube-prometheus-stack-values
  namespace: tap-install
spec:
  toNamespaces:
    - monitoring
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretImport
metadata:
  name: kube-prometheus-stack-values
  namespace: monitoring
spec:
  fromNamespace: tap-install