apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: tap-values
  namespace: tap-install
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: SecretStore
    name: azure-secret-store

  target:
    name: tap-values
    creationPolicy: Owner
    template:
      data:
        tap-values.yml: | 
          profile: view
          ceip_policy_disclosed: true

          shared:
            ingress_domain: view.cssa.tapsme.org
            ingress_issuer: letsencrypt-production

          contour:
            infrastructure_provider: azure
            envoy:
              service:
                type: LoadBalancer

          tap_gui:
            metadataStoreAutoconfiguration: true
            service_type: ClusterIP
            app_config:
              customize:
                features:
                  supplyChain:
                    enableTriageUI: true
              organization:
                name: "CSSA Team"
              catalog:
                locations:
                  - type: url
                    target: https://github.com/maelarge/tap-catalog/blob/main/catalog-info.yaml
              techdocs:
                builder: 'external'
                publisher:
                  type: 'azureBlobStorage'
                  azureBlobStorage:
                    containerName: 'pensketechdocs'
                    credentials:
                      accountName: 'tapsmeekstechdocs'
                      accountKey: {{ .techdocsaccountkey }}
              auth:
                environment: development
                providers:
                  github:
                    development:
                      clientId: 08cfa793c9fc0417343b
                      clientSecret: {{ .githubclientsecret }}

              integrations:
                github:
                  - host: github.com
                    token: {{ .githubtoken }}

              kubernetes:
                serviceLocatorMethod:
                  type: 'multiTenant'
                clusterLocatorMethods:
                  - type: 'config'
                    clusters:
                      - url: https://tap-build-cssa-resource-gr-489753-glslc8e3.hcp.westus.azmk8s.io
                        name: build
                        authProvider: serviceAccount
                        serviceAccountToken: {{ .tapguiviewerbuildsatoken }}
                        skipTLSVerify: true
                        skipMetricsLookup: false
                      - url: https://tap-run-cssa-resource-gr-489753-o2ybr5rh.hcp.westus.azmk8s.io:443
                        name: run
                        authProvider: serviceAccount
                        serviceAccountToken: {{ .tapguiviewerrunsatoken }}
                        skipTLSVerify: true
                        skipMetricsLookup: false
                      - url: https://tap-run-pr-cssa-resource-gr-489753-fe6i0un7.hcp.westus.azmk8s.io:443
                        name: run-prod
                        authProvider: serviceAccount
                        serviceAccountToken: {{ .tapguiviewerrunprodsatoken }}
                        skipTLSVerify: true
                        skipMetricsLookup: false

          appliveview:
            ingressEnabled: true
            ingress_issuer: letsencrypt-production

          accelerator:
            ingress:
              include: true

          metadata_store:
            ingress_enabled: "true"
            app_service_type: "ClusterIP"
            ns_for_export_app_cert: "*"
            deploy_internal_db: "false"
            db_host: "{{ .metadataStoreDbHost  }}"
            db_user: "{{ .metadataStoreDbUser  }}"
            db_password: "{{ .metadataStoreDbUserPassword  }}"
            db_name: "{{ .metadataStoreDbName  }}"
            db_port: "5432"
            db_sslmode: "prefer"
            db_ca_certificate: | 
              -----BEGIN CERTIFICATE-----
              MIIDIzCCAgugAwIBAgIRAM8XnaUHxEsCz5meNZPNHXswDQYJKoZIhvcNAQELBQAw
              KzEpMCcGA1UEAxMgcG9zdGdyZXMtb3BlcmF0b3ItY2EtY2VydGlmaWNhdGUwHhcN
              MjQwMjAxMTU1NjU5WhcNMjQwNTAxMTU1NjU5WjArMSkwJwYDVQQDEyBwb3N0Z3Jl
              cy1vcGVyYXRvci1jYS1jZXJ0aWZpY2F0ZTCCASIwDQYJKoZIhvcNAQEBBQADggEP
              ADCCAQoCggEBAOIu3o2Zsd0psTPvofP3gvbGQlttwZgjaiJ1F3onBGajh2a3WmWh
              YyFGwWOi0lniyXfIkStFVmiFwZ5q3L1PbqIW+Zh8v1HrNuBErqtYvtlxW+uiBPuO
              eGg+ygvJMJpkWHek7FLVkSZK6GVWp1XTuks+3E1Zio2/fHYU/l8HRBRS1VUw8i6s
              vG0YhE1WOzaUO0B+xdbhrVz+3XKnWZIn7ZoB361rPDIpWRquGqgLqvQkcGT2A+Cq
              c/gw7U5iaaYWurAC8CAummcZtM47UKy4iJwzeeeR1wZnuyzE8d1Ca/eNA2IqkT9K
              uezS2k84Joacp873zMc6MnOSFOnIzsqXxJECAwEAAaNCMEAwDgYDVR0PAQH/BAQD
              AgKkMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFB8tZhlN+25TdzLVPpk+EhdW
              r221MA0GCSqGSIb3DQEBCwUAA4IBAQAQ5+nRrJxs1ZnxJoQx85fxPO0uvmi2Vpto
              6RK964mwc23Yet/11S87FSRxE7NlUmW7oMrSRVuE91x4RoEwrvA9joIF7urYidsO
              DEp01yVvBENTFdmq0IN+DUWCjrOxcGak63PwZxTGX3hg0t3hstxrLi7ztRTaZ7Yu
              8pvltU0WHgEmSkvbpICjULsvCUCW4Bw1Xu4bX49TtEV83ZBR/Oko84NiMxrNRnzV
              ioRmfCcO48fyZBSBuZbPG1/hQcDJ/tt0nPqygHmxNlxPikDknuFvqz/iPXbYzq3Q
              koYYl/5U2BM7pP92HKOF4wLjoB7ARmQrHP2MYtbPK3AO37a476E2
              -----END CERTIFICATE-----

  data:
  - secretKey: githubclientsecret
    remoteRef:
      key: githubclientsecret
  - secretKey: githubtoken
    remoteRef:
      key: githubtoken
  - secretKey: tapguiviewerbuildsatoken
    remoteRef:
      key: tapguiviewerbuildsatoken
  - secretKey: tapguiviewerrunsatoken
    remoteRef:
      key: tapguiviewerrunsatoken
  - secretKey: tapguiviewerrunprodsatoken
    remoteRef:
      key: tapguiviewerrunprodsatoken
  - secretKey: techdocsaccountkey
    remoteRef:
      key: techdocsaccountkey
  - secretKey: tapguipostgresspassword
    remoteRef:
      key: tapguipostgresspassword
  - secretKey: metadataStoreDbHost
    remoteRef:
      key: metadataStoreDbHost
  - secretKey: metadataStoreDbUser
    remoteRef:
      key: metadataStoreDbUser
  - secretKey: metadataStoreDbUserPassword
    remoteRef:
      key: metadataStoreDbUserPassword
  - secretKey: metadataStoreDbName
    remoteRef:
      key: metadataStoreDbName      