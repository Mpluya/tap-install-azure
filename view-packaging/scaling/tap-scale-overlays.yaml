apiVersion: v1
kind: Secret
metadata:
  name: tap-scale-overlays
  namespace: tap-install
stringData:
  fluxcd-source-overlay.yaml: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:overlay", "overlay")
    #@overlay/match by=overlay.subset({"kind":"Deployment", "metadata":{"name":"fluxcd-source-controller", "namespace": "flux-system"}}), expects="0+"
    ---
    spec:
      template:
        spec:
          containers:
          #@overlay/match by="name"
          - name: manager
            resources:
              limits:
                cpu: "4"
                memory: "4Gi"
              requests:
                cpu: "2"
                memory: "2Gi"
            args:
            - --concurrent=30
            - --requeue-dependency=5s
  tekton-source-pipeline-run-template-overlay.yml: |
    #@ load("@ytt:overlay", "overlay")
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")
    
    #@overlay/match by=overlay.subset({"kind": "ClusterRunTemplate", "metadata": {"name": "tekton-source-pipelinerun"}}), expects="0+"
    ---
    spec:
      template:
        spec:
          #@overlay/match missing_ok=True
          #@overlay/match-child-defaults missing_ok=True
          taskRunSpecs:
          - pipelineTaskName: test
            computeResources:
              requests:
                cpu: 1.5
                memory: 1000Mi
              limits:
                cpu: 3
                memory: 2500Mi
  tekton-pipelines-webhook-overlay.yml: |
    #@ load("@ytt:overlay", "overlay")
    
    #@overlay/match by=overlay.subset({"kind": "HorizontalPodAutoscaler", "metadata": {"name": "tekton-pipelines-webhook"}}), expects="0+"
    ---
    spec:
      #@overlay/match missing_ok=True
      maxReplicas: 50
      minReplicas: 5
      #@overlay/remove
      metrics:
    
    #@overlay/match by=overlay.subset({"kind": "HorizontalPodAutoscaler", "metadata": {"name": "tekton-pipelines-webhook"}}), expects="0+"
    ---
    spec:
      #@overlay/match missing_ok=True
      metrics:
        - resource:
            name: cpu
            target:
              averageUtilization: 75
              type: Utilization
          type: Resource
  kpack-template-overlay.yml: |
    #@ load("@ytt:overlay", "overlay")
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")

    #@overlay/match by=overlay.subset({"kind": "ClusterImageTemplate", "metadata": {"name": "kpack-template"}}), expects="0+"
    ---
    spec:
      #@overlay/replace via=lambda left, right: left.replace("#@ load(\"@ytt:regexp\", \"regexp\")", right)
      ytt: |-
        #@ load("@ytt:regexp", "regexp")

        #@ def buildParam(key):
        #@   if not key in data.values.params["build_configuration"]:
        #@     return None
        #@   end
        #@   return data.values.params["build_configuration"][key]
        #@ end

    #@overlay/match by=overlay.subset({"kind": "ClusterImageTemplate", "metadata": {"name": "kpack-template"}}), expects="0+"
    ---
    spec:
      #@overlay/replace via=lambda left, right: left.replace("creationTime: #@ data.values.params.creationTime", right.strip())
      ytt: |
        creationTime: #@ data.values.params.creationTime
            #@ if param('build_configuration') != None:
            #@   if buildParam('resources') != None:
            resources: #@ data.values.params.build_configuration.resources
            #@   else:
            resources:
              requests:
                cpu: "1"
                memory: "500Mi"
              limits:
                cpu: "2"
            #@   end
            #@   if/end buildParam('tolerations') != None:
            tolerations: #@ data.values.params.build_configuration.tolerations
            #@   if/end buildParam('nodeSelector') != None:
            nodeSelector: #@ data.values.params.build_configuration.nodeSelector
            #@   if/end buildParam('buildTimeout') != None:
            buildTimeout: #@ data.values.params.build_configuration.buildTimeout
            #@   if/end buildParam('affinity') != None:
            affinity: #@ data.values.params.build_configuration.affinity
            #@ else: 
            resources:
              requests:
                cpu: "1"
                memory: "500Mi"
              limits:
                cpu: "2"
            #@ end
