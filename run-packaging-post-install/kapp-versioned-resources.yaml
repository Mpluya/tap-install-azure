apiVersion: kapp.k14s.io/v1alpha1
kind: Config
templateRules:
  - resourceMatchers:
      - apiVersionKindMatcher: {apiVersion: v1, kind: ConfigMap}
    affectedResources:
      objectReferences:
        - resourceMatchers:
            - apiVersionKindMatcher: {apiVersion: apps/v1, kind: Deployment}
          path: [spec, template, spec, containers, {allIndexes: true}, env, {allIndexes: true}, valueFrom, configMapKeyRef]
  - resourceMatchers:
      - apiVersionKindMatcher: {apiVersion: v1, kind: Secret}
    affectedResources:
      objectReferences:
        - resourceMatchers:
            - apiVersionKindMatcher: {apiVersion: apps/v1, kind: Deployment}
          path: [spec, template, spec, containers, {allIndexes: true}, env, {allIndexes: true}, valueFrom, secretKeyRef]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: special-config
  namespace: mae
  annotations:
    kapp.k14s.io/versioned: ""
    kapp.k14s.io/versioned-keep-original: ""
data:
  special.how: bathroom
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: workload-secrets
  namespace: tap-install
spec:
  secretStoreRef:
    kind: SecretStore
    name: azure-secret-store
  refreshInterval: "1m"
  target:
    name: workload-secrets
    creationPolicy: Owner
    template:
      metadata:
        annotations:
          kapp.k14s.io/versioned: ""
          kapp.k14s.io/versioned-keep-original: ""
      data:
        database: "{{ .database }}"
  data:
    - secretKey: database
      remoteRef:
        key: database
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: mae
  labels:
    app: nginx
spec:
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:1.14.2
          ports:
            - containerPort: 80
          env:
            - name: SPECIAL_LEVEL_KEY
              valueFrom:
                configMapKeyRef:
                  name: special-config
                  key: special.how
            - name: SPECIAL_LEVEL_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: workload-secrets
                  key: database