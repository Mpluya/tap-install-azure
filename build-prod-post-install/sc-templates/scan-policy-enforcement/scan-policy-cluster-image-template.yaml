apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: policy-enforcement-template
spec:
  params:
    - name: scan_severity_gate
      default: critical

  healthRule:
    singleConditionType: Ready
  imagePath: .status.outputs.imagePath
  lifecycle: mutable
  ytt: |-
    #@ load("@ytt:data", "data")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     exclusions = ["kapp.k14s.io/app", "kapp.k14s.io/association"]
    #@     for k,v in dict(data.values.workload.metadata.labels).items():
    #@       if k not in exclusions:
    #@         labels[k] = v
    #@       end
    #@     end
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def merged_tekton_params():
    #@   params = []
    #@   params.append({ "name": "image", "value": data.values.image })
    #@   params.append({ "name": "gate", "value": data.values.scan_severity_gate })
    #@   return params
    #@ end
    ---
    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: #@ data.values.workload.metadata.name + "-policy"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "test" })
    spec:
      retentionPolicy:
        maxFailedRuns: 1
        maxSuccessfulRuns: 1

      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName

      runTemplateRef:
        name: tekton-policy-enforcement-taskrun
        kind: ClusterRunTemplate

      resource:
        apiVersion: tekton.dev/v1
        kind: TaskRun

      inputs:
        tekton-params: #@ merged_tekton_params()

---
apiVersion: carto.run/v1alpha1
kind: ClusterRunTemplate
metadata:
  name: tekton-policy-enforcement-taskrun
spec:
  outputs:
    imagePath: spec.params[?(@.name=="image")].value
  template:
    apiVersion: tekton.dev/v1
    kind: TaskRun
    metadata:
      generateName: $(runnable.metadata.name)$-
      labels: $(runnable.metadata.labels)$
    spec:
      params: $(runnable.spec.inputs.tekton-params)$
      serviceAccountName: default
      taskRef:
        name: tekton-policy-enforcement