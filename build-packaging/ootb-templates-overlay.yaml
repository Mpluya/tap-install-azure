apiVersion: v1
kind: Secret
metadata:
  name: ootb-template-overlay
  namespace: tap-install
type: Opaque
stringData:
  ootb-template-overlay.yaml: |
    #@ load("@ytt:overlay", "overlay")
    #@ load("@ytt:template", "template")

    #@overlay/match by=overlay.subset({"kind": "ClusterTemplate","metadata":{"name":"config-writer-template"}}), expects="0+"
    ---
    spec:
      ytt: | 
        #@ load("@ytt:data", "data")
        #@ load("@ytt:json", "json")
        #@ load("@ytt:base64", "base64")
        #@ load("@ytt:assert", "assert")

        #@ label_exclusions = "[\"" + "\", \"".join(["kapp.k14s.io/app", "kapp.k14s.io/association"]) + "\"]"

        #@ def merge_labels(fixed_values):
        #@   labels = {}
        #@   if hasattr(data.values.workload.metadata, "labels"):
        #@     exclusions = (@= label_exclusions @)
        #@     for k,v in dict(data.values.workload.metadata.labels).items():
        #@       if k not in exclusions:
        #@         labels[k] = v
        #@       end
        #@     end
        #@   end
        #@   labels.update(fixed_values)
        #@   return labels
        #@ end

        #@ def is_monorepo_approach():
        #@   if 'gitops_server_address' in data.values.params and 'gitops_repository_owner' in data.values.params and 'gitops_repository_name' in data.values.params:
        #@     return True
        #@   end
        #@   if 'gitops_server_address' in data.values.params or 'gitops_repository_owner' in data.values.params or 'gitops_repository_name' in data.values.params:
        #@     'gitops_server_address' in data.values.params or assert.fail("missing param: gitops_server_address")
        #@     'gitops_repository_owner' in data.values.params or assert.fail("missing param: gitops_repository_owner")
        #@     'gitops_repository_name' in data.values.params or assert.fail("missing param: gitops_repository_name")
        #@   end
        #@   return False
        #@ end

        #@ def has_git_params():
        #@   if 'gitops_repository_prefix' in data.values.params:
        #@     return True
        #@   end
        #@
        #@   if 'gitops_repository' in data.values.params:
        #@     return True
        #@   end
        #@
        #@   return False
        #@ end

        #@ def is_gitops():
        #@   return is_monorepo_approach() or has_git_params()
        #@ end

        #@ def param(key):
        #@   if not key in data.values.params:
        #@     return None
        #@   end
        #@   return data.values.params[key]
        #@ end

        #@ def strip_trailing_slash(some_string):
        #@   if some_string[-1] == "/":
        #@     return some_string[:-1]
        #@   end
        #@   return some_string
        #@ end

        #@ def mono_repository():
        #@   strip_trailing_slash(data.values.params.gitops_server_address)
        #@   if param("gitops_server_kind") == "azure":
        #@     return "/".join([
        #@       strip_trailing_slash(data.values.params.gitops_server_address),
        #@       strip_trailing_slash(data.values.params.gitops_repository_owner),
        #@       "_git",
        #@       data.values.params.gitops_repository_name,
        #@     ])
        #@   end
        #@
        #@   return "/".join([
        #@     strip_trailing_slash(data.values.params.gitops_server_address),
        #@     strip_trailing_slash(data.values.params.gitops_repository_owner),
        #@     data.values.params.gitops_repository_name,
        #@   ]) + ".git"
        #@ end

        #@ def git_repository():
        #@   if is_monorepo_approach():
        #@     return mono_repository()
        #@   end
        #@
        #@   if 'gitops_repository' in data.values.params:
        #@     return param("gitops_repository")
        #@   end
        #@
        #@   prefix = param("gitops_repository_prefix")
        #@   if param("gitops_server_kind") == "azure":
        #@     return prefix + data.values.workload.metadata.name
        #@   end
        #@   return prefix + data.values.workload.metadata.name + ".git"
        #@ end

        #@ def image():
        #@   return "/".join([
        #@    data.values.params.registry.server,
        #@    data.values.params.registry.repository,
        #@    "-".join([
        #@      data.values.workload.metadata.name,
        #@      data.values.workload.metadata.namespace,
        #@      "bundle",
        #@    ])
        #@   ]) + ":" + data.values.workload.metadata.uid
        #@ end

        #@ def ca_cert_data():
        #@   if "ca_cert_data" not in param("registry"):
        #@     return ""
        #@   end
        #@
        #@   return param("registry")["ca_cert_data"]
        #@ end

        #@ if is_gitops():
        ---
        apiVersion: tekton.dev/v1beta1
        kind: TaskRun
        metadata:
          generateName: #@ data.values.workload.metadata.name + "-config-writer-"
          labels: #@ merge_labels({ "app.kubernetes.io/component": "config-writer" })
        spec:
          serviceAccountName: #@ data.values.params.serviceAccount
          params:
            - name: git_repository
              value: #@ git_repository()
            - name: git_branch
              value: #@ param("gitops_branch")
            - name: git_user_name
              value: #@ param("gitops_user_name")
            - name: git_user_email
              value: #@ param("gitops_user_email")
            - name: git_commit_message
              value: #@ param("gitops_commit_message")
            - name: git_files
              value: #@ base64.encode(json.encode(data.values.config))
            #@ if/end is_monorepo_approach():
            - name: sub_path
              value: #@ "config/" + data.values.workload.metadata.namespace + "/" + data.values.workload.metadata.name + "/dev" 
          taskRef:
            resolver: cluster
            params:
              - name: kind
                value: task
              - name: namespace
                value: tap-tasks
              - name: name
                value: git-writer

        #@ else:
        ---
        apiVersion: tekton.dev/v1beta1
        kind: TaskRun
        metadata:
          generateName: #@ data.values.workload.metadata.name + "-config-writer-"
          labels: #@ merge_labels({ "app.kubernetes.io/component": "config-writer" })
        spec:
          serviceAccountName: #@ data.values.params.serviceAccount
          params:
            - name: files
              value: #@ base64.encode(json.encode(data.values.config))
            - name: bundle
              value: #@ image()
            - name: ca_cert_data
              value: #@ ca_cert_data()
          taskRef:
            resolver: cluster
            params:
              - name: kind
                value: task
              - name: namespace
                value: tap-tasks
              - name: name
                value: image-writer

        #@ end




    #@overlay/match by=overlay.subset({"kind": "ClusterTemplate","metadata":{"name":"config-writer-template"}}), expects="0+"
    ---
    #@overlay/replace
    kind: ClusterConfigTemplate
    spec:
      #@overlay/match missing_ok=True
      configPath: .status.completionTime
  
    #@overlay/match by=overlay.subset({"kind": "ClusterImageTemplate","metadata":{"name":"kpack-template"}}), expects="0+"
    ---
    spec:
      ytt: |
        #@ load("@ytt:data", "data")

        #@ def merge_labels(fixed_values):
        #@   labels = {}
        #@   if hasattr(data.values.workload.metadata, "labels"):
        #@     labels.update(data.values.workload.metadata.labels)
        #@   end
        #@   labels.update(fixed_values)
        #@   return labels
        #@ end

        #@ def param(key):
        #@   if not key in data.values.params:
        #@     return None
        #@   end
        #@   return data.values.params[key]
        #@ end

        #@ def maven_param(key):
        #@   if not key in data.values.params["maven"]:
        #@     return None
        #@   end
        #@   return data.values.params["maven"][key]
        #@ end

        #@ def maven_repository_url():
        #@   if maven_param("repository") and "url" in maven_param("repository"):
        #@     return maven_param("repository")["url"]
        #@   elif param("maven_repository_url"):
        #@     return param("maven_repository_url")
        #@   else:
        #@     return None
        #@   end   
        #@ end

        #@ def additional_tags():
        #@   tags = []
        #@   for val in param("additional_tags"):
        #@     tags.append("{}:{}".format( image(), val))
        #@   end
        #@   return tags
        #@ end

        #@ def image_by_namespace():
        #@   return "/".join([
        #@    data.values.params.registry.server,
        #@    "/".join([
        #@      data.values.params.registry.repository,
        #@      data.values.workload.metadata.namespace,
        #@    ]),
        #@    "-".join([
        #@      data.values.workload.metadata.name,
        #@      data.values.workload.metadata.namespace,
        #@    ])
        #@   ])
        #@ end

        #@ def image():
        #@   return "/".join([
        #@    data.values.params.registry.server,
        #@    data.values.params.registry.repository,
        #@    "-".join([
        #@      data.values.workload.metadata.name,
        #@      data.values.workload.metadata.namespace,
        #@    ])
        #@   ])
        #@ end

        #@ def git_revision():
        #@   return data.values.source.revision.split(":")[1]
        #@ end

        #@ def correlationId():
        #@   if hasattr(data.values.workload, "annotations") and hasattr(data.values.workload.annotations, "apps.tanzu.vmware.com/correlationid"):
        #@     return data.values.workload.annotations["apps.tanzu.vmware.com/correlationid"]
        #@   end
        #@   url = ""
        #@   if hasattr(data.values.workload.spec, "source"):
        #@     if hasattr(data.values.workload.spec.source, "git"):
        #@       url = data.values.workload.spec.source.git.url
        #@     elif hasattr(data.values.workload.spec.source, "image"):
        #@       url = data.values.workload.spec.source.image.split("@")[0]
        #@     end
        #@     url = url + "?sub_path=" + getattr(data.values.workload.spec.source, "subPath", "/")
        #@   end
        #@   if param("maven"):
        #@     url = maven_repository_url() + "/" + maven_param("groupId").replace(".", "/") + "/" + maven_param("artifactId")  
        #@   end
        #@   return url
        #@ end

        apiVersion: kpack.io/v1alpha2
        kind: Image
        metadata:
          name: #@ data.values.workload.metadata.name
          labels: #@ merge_labels({ "app.kubernetes.io/component": "build" })
          annotations:
            apps.tanzu.vmware.com/correlationid: #@ correlationId()
        spec:
          tag: #@ image()
          #@ if hasattr(data.values.params, "additional_tags"):
          additionalTags: #@ additional_tags()
          #@ end
          serviceAccountName: #@ data.values.params.serviceAccount
          builder:
            kind: ClusterBuilder
            name: #@ data.values.params.clusterBuilder
          source:
            blob:
              url: #@ data.values.source.url
            #@ if hasattr(data.values.workload.spec, "source"):
            #@ if/end hasattr(data.values.workload.spec.source, "subPath"):
            subPath: #@ data.values.workload.spec.source.subPath
            #@ end
          build:
            env:
            - name: BP_OCI_SOURCE
              value: #@ data.values.source.revision
            #@ if/end param("live-update"):
            - name: BP_LIVE_RELOAD_ENABLED
              value: 'true'
            #@ if hasattr(data.values.workload.spec.build, "env"):
            #@ for var in data.values.workload.spec.build.env:
            - name: #@ var.name
              #@ if/end hasattr(var, "value"):
              value: #@ var.value
              #@ if/end hasattr(var, "valueFrom"):
              valueFrom: #@ var.valueFrom
            #@ end
            #@ end
            services: #@ data.values.params.buildServiceBindings