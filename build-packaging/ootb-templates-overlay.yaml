apiVersion: v1
kind: Secret
metadata:
  name: ootb-template-overlay
  namespace: tap-install
type: Opaque
stringData:
  ootb-template-overlay.yaml: |
    #@ load("@ytt:overlay", "overlay")
    #@ load("@ytt:template", "template")
    #@ load("@ytt:overlay", "overlay")

    #@overlay/match by=overlay.subset({"kind": "ClusterTemplate","metadata":{"name":"config-writer-template"}}), expects="0+"
    ---
    #@overlay/replace
    kind: ClusterConfigTemplate
    spec:
      #@overlay/match missing_ok=True
      configPath: .spec.inputs.params
  
    #@overlay/match by=overlay.subset({"kind": "ClusterImageTemplate","metadata":{"name":"kpack-template"}}), expects="0+"
    ---
    spec:
      ytt: |
        #@ load("@ytt:data", "data")

        #@ def merge_labels(fixed_values):
        #@   labels = {}
        #@   if hasattr(data.values.workload.metadata, "labels"):
        #@     labels.update(data.values.workload.metadata.labels)
        #@   end
        #@   labels.update(fixed_values)
        #@   return labels
        #@ end

        #@ def param(key):
        #@   if not key in data.values.params:
        #@     return None
        #@   end
        #@   return data.values.params[key]
        #@ end

        #@ def image():
        #@   return "/".join([
        #@    data.values.params.registry.server,
        #@    "/".join([
        #@      data.values.params.registry.repository,
        #@      data.values.workload.metadata.namespace,
        #@    ]),
        #@    "-".join([
        #@      data.values.workload.metadata.name,
        #@      data.values.workload.metadata.namespace,
        #@    ])
        #@   ])
        #@ end

        apiVersion: kpack.io/v1alpha2
        kind: Image
        metadata:
          name: #@ data.values.workload.metadata.name
          labels: #@ merge_labels({ "app.kubernetes.io/component": "build" })
        spec:
          tag: #@ image()
          additionalTags: 
          - index.docker.io/tap-build/workloads/mae/image-repo-namespaced-mae:0.0.0
          serviceAccountName: #@ data.values.params.serviceAccount
          builder:
            kind: ClusterBuilder
            name: #@ data.values.params.clusterBuilder
          source:
            blob:
              url: #@ data.values.source.url
            #@ if hasattr(data.values.workload.spec, "source"):
            #@ if/end hasattr(data.values.workload.spec.source, "subPath"):
            subPath: #@ data.values.workload.spec.source.subPath
            #@ end
          build:
            env:
            - name: BP_OCI_SOURCE
              value: #@ data.values.source.revision
            #@ if/end param("live-update"):
            - name: BP_LIVE_RELOAD_ENABLED
              value: 'true'
            #@ if hasattr(data.values.workload.spec.build, "env"):
            #@ for var in data.values.workload.spec.build.env:
            - name: #@ var.name
              #@ if/end hasattr(var, "value"):
              value: #@ var.value
              #@ if/end hasattr(var, "valueFrom"):
              valueFrom: #@ var.valueFrom
            #@ end
            #@ end
            services: #@ data.values.params.buildServiceBindings