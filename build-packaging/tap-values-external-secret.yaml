apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: tap-values
  namespace: tap-install
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: SecretStore
    name: azure-secret-store

  target:
    name: tap-values
    creationPolicy: Owner
    template:
      data:
        tap-values.yml: | 
          profile: build
          ceip_policy_disclosed: true

          shared:
            ingress_domain: build.cssa.tapsme.org
            image_registry:  
              project_path: "cxscssa.azurecr.io/tap-build"
              secret:
                name: tap-registry-basic-auth
                namespace: tap-install
          
          tekton_pipelines:
            feature_flags:
              enable_api_fields: "alpha"
          
          buildservice:
            dependency_updates:
              allow: true
              scope: custom
              include_packages:
                - go-lite.buildpacks.tanzu.vmware.com

          amr:
            observer:
              location: |
                labels:
                - key: env
                  value: build
              cloudevent_handler:
                endpoint: "https://amr-cloudevent-handler.view.cssa.tapsme.org"
                liveness_period_seconds: 10
              auth:
                kubernetes_service_accounts:
                  enable: true
                  autoconfigure: false
              ca_cert_data: |
                -----BEGIN CERTIFICATE-----
                MIIFITCCBAmgAwIBAgISBARKpyLDsqw9W/cSVKxxbvw7MA0GCSqGSIb3DQEBCwUA
                MDIxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQswCQYDVQQD
                EwJSMzAeFw0yNDAyMDIxNzQyMTNaFw0yNDA1MDIxNzQyMTJaMDYxNDAyBgNVBAMT
                K2Ftci1jbG91ZGV2ZW50LWhhbmRsZXIudmlldy5jc3NhLnRhcHNtZS5vcmcwggEi
                MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCx8Nl3eh+quzD+8sZSzrofWSkB
                Bfb3pT986DB41+8JI6DdPyuf5N69CyZTmM19tfwYaO1GxtNo1luimUlaTUS10fjq
                oDgqx3Ucp0KQ+XCfeUdVMJHhWAL2i8pJAdFwxP9u99Hw5ts8ywytsdODVT2xCVEx
                ZAzuZVxn2Jvt1Jv2atsSrI+I+6v79AiX7D8t8I6CKqWQn8ql0WmNZHIRZk+FTC9p
                /tFAvIBnjArN4Dvgk3q/Z560y5aZZnza6QvkbmNYVZzVH3XLDtue5V9rQvHJVGaW
                Npgv0mvVmFYhIp7QQLoWI8hWLHGod64qI+1grgHz6PzKi5GyHtqueTlfNspDAgMB
                AAGjggIrMIICJzAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEG
                CCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFCRDSTzNykqm2UFUBE/y
                DPZQVAF9MB8GA1UdIwQYMBaAFBQusxe3WFbLrlAJQOYfr52LFMLGMFUGCCsGAQUF
                BwEBBEkwRzAhBggrBgEFBQcwAYYVaHR0cDovL3IzLm8ubGVuY3Iub3JnMCIGCCsG
                AQUFBzAChhZodHRwOi8vcjMuaS5sZW5jci5vcmcvMDYGA1UdEQQvMC2CK2Ftci1j
                bG91ZGV2ZW50LWhhbmRsZXIudmlldy5jc3NhLnRhcHNtZS5vcmcwEwYDVR0gBAww
                CjAIBgZngQwBAgEwggECBgorBgEEAdZ5AgQCBIHzBIHwAO4AdQBIsONr2qZHNA/l
                agL6nTDrHFIBy1bdLIHZu7+rOdiEcwAAAY1rIOMJAAAEAwBGMEQCIHIpTStJPdpp
                XrZz5JbGPas/dV6v6rVqhpbuuYgpyWhyAiBUHpVmHST/NVCxzvDsQs/eK+5S9/2z
                5RBq7bbptU+X2wB1AKLiv9Ye3i8vB6DWTm03p9xlQ7DGtS6i2reK+Jpt9RfYAAAB
                jWsg4ykAAAQDAEYwRAIgQYYJ2XLLlfXz4X0Gi5LzwDoepuVcg3OJ0s9arUMZ2BIC
                IHfZouIORDZK22HQ6Hwu7rfvnI7DoPW4k3yYW09Cjl3aMA0GCSqGSIb3DQEBCwUA
                A4IBAQBK6YUccRijTXbl6N+sRHrtn+A2JsXZtKDqgABUWbf3EyivSANZkU1rvida
                6HcyItWshYI5shVNT50gHyw8nhdKDzkDtOfd+ut9uxaYSvaPNdYumPdh/4xs5eOA
                CtxvGHeWm6knwDnGUcJitPtv15AUEojToUX8+A+7le1NWLuuXLSV0RKFato4T9iy
                LTNcLWfpMxB5ZoFqipu18BPf1fYZEEmqRiIm1sOTx2gslE2X4DgRQ/Ix6aD24cfY
                D6/WFZ8tykdAe1/jWe1E+Y4s1eFMiR9WueQwxrptMRqWhxLC/2QqTRkjgw2deLYx
                tU6xGGa541tjENl9J37jeRu9f9d7
                -----END CERTIFICATE-----
                -----BEGIN CERTIFICATE-----
                MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw
                TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh
                cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw
                WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg
                RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
                AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP
                R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx
                sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm
                NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg
                Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG
                /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC
                AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB
                Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA
                FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw
                AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw
                Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB
                gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W
                PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl
                ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz
                CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm
                lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4
                avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2
                yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O
                yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids
                hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+
                HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv
                MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX
                nLRbwHOoq7hHwg==
                -----END CERTIFICATE-----
                -----BEGIN CERTIFICATE-----
                MIIFYDCCBEigAwIBAgIQQAF3ITfU6UK47naqPGQKtzANBgkqhkiG9w0BAQsFADA/
                MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT
                DkRTVCBSb290IENBIFgzMB4XDTIxMDEyMDE5MTQwM1oXDTI0MDkzMDE4MTQwM1ow
                TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh
                cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwggIiMA0GCSqGSIb3DQEB
                AQUAA4ICDwAwggIKAoICAQCt6CRz9BQ385ueK1coHIe+3LffOJCMbjzmV6B493XC
                ov71am72AE8o295ohmxEk7axY/0UEmu/H9LqMZshftEzPLpI9d1537O4/xLxIZpL
                wYqGcWlKZmZsj348cL+tKSIG8+TA5oCu4kuPt5l+lAOf00eXfJlII1PoOK5PCm+D
                LtFJV4yAdLbaL9A4jXsDcCEbdfIwPPqPrt3aY6vrFk/CjhFLfs8L6P+1dy70sntK
                4EwSJQxwjQMpoOFTJOwT2e4ZvxCzSow/iaNhUd6shweU9GNx7C7ib1uYgeGJXDR5
                bHbvO5BieebbpJovJsXQEOEO3tkQjhb7t/eo98flAgeYjzYIlefiN5YNNnWe+w5y
                sR2bvAP5SQXYgd0FtCrWQemsAXaVCg/Y39W9Eh81LygXbNKYwagJZHduRze6zqxZ
                Xmidf3LWicUGQSk+WT7dJvUkyRGnWqNMQB9GoZm1pzpRboY7nn1ypxIFeFntPlF4
                FQsDj43QLwWyPntKHEtzBRL8xurgUBN8Q5N0s8p0544fAQjQMNRbcTa0B7rBMDBc
                SLeCO5imfWCKoqMpgsy6vYMEG6KDA0Gh1gXxG8K28Kh8hjtGqEgqiNx2mna/H2ql
                PRmP6zjzZN7IKw0KKP/32+IVQtQi0Cdd4Xn+GOdwiK1O5tmLOsbdJ1Fu/7xk9TND
                TwIDAQABo4IBRjCCAUIwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw
                SwYIKwYBBQUHAQEEPzA9MDsGCCsGAQUFBzAChi9odHRwOi8vYXBwcy5pZGVudHJ1
                c3QuY29tL3Jvb3RzL2RzdHJvb3RjYXgzLnA3YzAfBgNVHSMEGDAWgBTEp7Gkeyxx
                +tvhS5B1/8QVYIWJEDBUBgNVHSAETTBLMAgGBmeBDAECATA/BgsrBgEEAYLfEwEB
                ATAwMC4GCCsGAQUFBwIBFiJodHRwOi8vY3BzLnJvb3QteDEubGV0c2VuY3J5cHQu
                b3JnMDwGA1UdHwQ1MDMwMaAvoC2GK2h0dHA6Ly9jcmwuaWRlbnRydXN0LmNvbS9E
                U1RST09UQ0FYM0NSTC5jcmwwHQYDVR0OBBYEFHm0WeZ7tuXkAXOACIjIGlj26Ztu
                MA0GCSqGSIb3DQEBCwUAA4IBAQAKcwBslm7/DlLQrt2M51oGrS+o44+/yQoDFVDC
                5WxCu2+b9LRPwkSICHXM6webFGJueN7sJ7o5XPWioW5WlHAQU7G75K/QosMrAdSW
                9MUgNTP52GE24HGNtLi1qoJFlcDyqSMo59ahy2cI2qBDLKobkx/J3vWraV0T9VuG
                WCLKTVXkcGdtwlfFRjlBz4pYg1htmf5X6DYO8A4jqv2Il9DjXA6USbW1FzXSLr9O
                he8Y4IWS6wY7bCkjCWDcRQJMEhg76fsO3txE+FiYruq9RUWhiF1myv4Q6W+CyBFC
                Dfvp7OOGAN6dEOM4+qR9sdjoSYKEBpsr6GtPAQw4dy753ec5
                -----END CERTIFICATE-----
                    
          contour:
            envoy:
              service:
                type: ClusterIP
          
          cartographer:
            cartographer:
              concurrency:
                max_workloads: 50
                max_deliveries: 50
                max_runnables: 50
              resources: # build server settings
                limits:
                  cpu: 4
                  memory: 10Gi
                requests:
                  cpu: 3
                  memory: 10Gi

          supply_chain: "testing_scanning"

          ootb_supply_chain_basic:
            gitops:
              ssh_secret: "tenant-gitops-ssh"
              server_address: "ssh://git@github.com"
              repository_owner: "Mpluya"
              repository_name: "tap-azure-workload-config-repo"
              branch: main

          ootb_supply_chain_testing:
            gitops:
              ssh_secret: "tenant-gitops-ssh"
              server_address: "ssh://git@github.com"
              repository_owner: "Mpluya"
              repository_name: "tap-azure-workload-config-repo"
              branch: main
          
          ootb_supply_chain_testing_scanning:
            image_scanner_template_name: image-vulnerability-scan-trivy
            image_scanning_cli:
              image: cxscssa.azurecr.io/tap-1-9-1/tap-packages@sha256:31d36a8582a75b042dc12aea0808f822e27747a2f8103af0f0c52ef8d68a8bf0
            carvel_package:
              workflow_enabled: true
              gitops_subpath: packages
              name_suffix: cssa.vmware.com
              openapiv3_enabled: true

            gitops:
              ssh_secret: "tenant-gitops-ssh"
              server_address: "ssh://git@github.com"
              repository_owner: "Mpluya"
              repository_name: "tap-azure-workload-config-repo"
              branch: main

          app_scanning:
            scans:
              maxConcurrentScans: 100

          scanning:
            resources:
              limits:
                cpu: 500m
                memory: 3Gi
              requests:
                cpu: 200m
                memory: 1Gi
            metadataStore:
              exports:
                ca:
                  pem: |
                    -----BEGIN CERTIFICATE-----
                    MIIFEzCCA/ugAwIBAgISBLlob9IU7Eg8GsbPqYPtL8rKMA0GCSqGSIb3DQEBCwUA
                    MDIxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQswCQYDVQQD
                    EwJSMzAeFw0yNDAyMDIxNzQyMTJaFw0yNDA1MDIxNzQyMTFaMC4xLDAqBgNVBAMT
                    I21ldGFkYXRhLXN0b3JlLnZpZXcuY3NzYS50YXBzbWUub3JnMIIBIjANBgkqhkiG
                    9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuKwVUYWGRJGyykHmkgCh9wmRV0Pup9R9L+/1
                    tYBZ4bitb4fC2CqoxfKH9PZS0UstB5W+D/fW7IvusKP2xsgMcfA4ZPBbW8ztrI7E
                    6hIbWXzNVm5gMAGs03T0O+aVyp4W+fkCyke/jN88PbrdAqakqGNGcG8mqHVHQYjc
                    1O/OvOGy+R25UChh+6J9byG2+wjqDP8XAWs3ALdG9UhdG/Tb4lymfOwZCq1govNZ
                    seJkWV3Dc927nA71C4qMgwFL3XEfb8XHFHRP9FXgbtN13HY5OfbfZJd0aJM84Y+A
                    o+anCPUHuCkHOqm4im/QzcxWQpR+gJ9t9VqIDNVgLahxtj0Q5wIDAQABo4ICJTCC
                    AiEwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcD
                    AjAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBTKB2uam3JeLkTfVhBW9XvqA8l2yjAf
                    BgNVHSMEGDAWgBQULrMXt1hWy65QCUDmH6+dixTCxjBVBggrBgEFBQcBAQRJMEcw
                    IQYIKwYBBQUHMAGGFWh0dHA6Ly9yMy5vLmxlbmNyLm9yZzAiBggrBgEFBQcwAoYW
                    aHR0cDovL3IzLmkubGVuY3Iub3JnLzAuBgNVHREEJzAlgiNtZXRhZGF0YS1zdG9y
                    ZS52aWV3LmNzc2EudGFwc21lLm9yZzATBgNVHSAEDDAKMAgGBmeBDAECATCCAQQG
                    CisGAQQB1nkCBAIEgfUEgfIA8AB3AO7N0GTV2xrOxVy3nbTNE6Iyh0Z8vOzew1FI
                    WUZxH7WbAAABjWsg3dAAAAQDAEgwRgIhAMpUJrLQXc7JP7sUMRitkGWYwbpq72OY
                    bCI19GCdZXUgAiEA6BZ4AC5RVizo6iULOhZk53gxI+5uQhcyPJyPOrOvCEYAdQBI
                    sONr2qZHNA/lagL6nTDrHFIBy1bdLIHZu7+rOdiEcwAAAY1rIN+7AAAEAwBGMEQC
                    IHG+MyozUPf1OLKy20uR0O9MUHhyqRM/u6H8+nc9/ySBAiBxahFMGLAVGLcwUyzk
                    ML2Qht72r3MwCnmSAIcxSSvhIDANBgkqhkiG9w0BAQsFAAOCAQEAkgzqLmN91ZBp
                    a+jWlGnGR4xk54dkpHwj06JVCY1RORf3zuz/lVJWaj11dV5IkQCAXmhAK7vk2jnC
                    wXtTbf7HnfkiEXzp/vK6IshjxmLX49wmLNntip0E1LeVE0FgdfzgmUdceBDZMG0i
                    oLvU8ox9DAO/ghn3NoXK095AvtjUMWxTDf873eHFuyPYyjNtVRmhBJlNgGQZhiAI
                    KkTG5pOLiFPabV7xYJqzqMvcVtjCTLqswOUM22szT7qvD9X0pE7sT4aM9sjldGuE
                    EMa0BTwEWo5dRcK+E2T5x+BJP568Mb0YFWJ+gAGGtKopDr68moMpwPPr141bLZQU
                    C9ii6C7Jeg==
                    -----END CERTIFICATE-----
                    -----BEGIN CERTIFICATE-----
                    MIIFFjCCAv6gAwIBAgIRAJErCErPDBinU/bWLiWnX1owDQYJKoZIhvcNAQELBQAw
                    TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh
                    cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMjAwOTA0MDAwMDAw
                    WhcNMjUwOTE1MTYwMDAwWjAyMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNTGV0J3Mg
                    RW5jcnlwdDELMAkGA1UEAxMCUjMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
                    AoIBAQC7AhUozPaglNMPEuyNVZLD+ILxmaZ6QoinXSaqtSu5xUyxr45r+XXIo9cP
                    R5QUVTVXjJ6oojkZ9YI8QqlObvU7wy7bjcCwXPNZOOftz2nwWgsbvsCUJCWH+jdx
                    sxPnHKzhm+/b5DtFUkWWqcFTzjTIUu61ru2P3mBw4qVUq7ZtDpelQDRrK9O8Zutm
                    NHz6a4uPVymZ+DAXXbpyb/uBxa3Shlg9F8fnCbvxK/eG3MHacV3URuPMrSXBiLxg
                    Z3Vms/EY96Jc5lP/Ooi2R6X/ExjqmAl3P51T+c8B5fWmcBcUr2Ok/5mzk53cU6cG
                    /kiFHaFpriV1uxPMUgP17VGhi9sVAgMBAAGjggEIMIIBBDAOBgNVHQ8BAf8EBAMC
                    AYYwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB
                    Af8CAQAwHQYDVR0OBBYEFBQusxe3WFbLrlAJQOYfr52LFMLGMB8GA1UdIwQYMBaA
                    FHm0WeZ7tuXkAXOACIjIGlj26ZtuMDIGCCsGAQUFBwEBBCYwJDAiBggrBgEFBQcw
                    AoYWaHR0cDovL3gxLmkubGVuY3Iub3JnLzAnBgNVHR8EIDAeMBygGqAYhhZodHRw
                    Oi8veDEuYy5sZW5jci5vcmcvMCIGA1UdIAQbMBkwCAYGZ4EMAQIBMA0GCysGAQQB
                    gt8TAQEBMA0GCSqGSIb3DQEBCwUAA4ICAQCFyk5HPqP3hUSFvNVneLKYY611TR6W
                    PTNlclQtgaDqw+34IL9fzLdwALduO/ZelN7kIJ+m74uyA+eitRY8kc607TkC53wl
                    ikfmZW4/RvTZ8M6UK+5UzhK8jCdLuMGYL6KvzXGRSgi3yLgjewQtCPkIVz6D2QQz
                    CkcheAmCJ8MqyJu5zlzyZMjAvnnAT45tRAxekrsu94sQ4egdRCnbWSDtY7kh+BIm
                    lJNXoB1lBMEKIq4QDUOXoRgffuDghje1WrG9ML+Hbisq/yFOGwXD9RiX8F6sw6W4
                    avAuvDszue5L3sz85K+EC4Y/wFVDNvZo4TYXao6Z0f+lQKc0t8DQYzk1OXVu8rp2
                    yJMC6alLbBfODALZvYH7n7do1AZls4I9d1P4jnkDrQoxB3UqQ9hVl3LEKQ73xF1O
                    yK5GhDDX8oVfGKF5u+decIsH4YaTw7mP3GFxJSqv3+0lUFJoi5Lc5da149p90Ids
                    hCExroL1+7mryIkXPeFM5TgO9r0rvZaBFOvV2z0gp35Z0+L4WPlbuEjN/lxPFin+
                    HlUjr8gRsI3qfJOQFy/9rKIJR0Y/8Omwt/8oTWgy1mdeHmmjk7j1nYsvC9JSQ6Zv
                    MldlTTKB3zhThV1+XWYp6rjd5JW1zbVWEkLNxE7GJThEUG3szgBVGP7pSWTUTsqX
                    nLRbwHOoq7hHwg==
                    -----END CERTIFICATE-----
                    -----BEGIN CERTIFICATE-----
                    MIIFYDCCBEigAwIBAgIQQAF3ITfU6UK47naqPGQKtzANBgkqhkiG9w0BAQsFADA/
                    MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT
                    DkRTVCBSb290IENBIFgzMB4XDTIxMDEyMDE5MTQwM1oXDTI0MDkzMDE4MTQwM1ow
                    TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh
                    cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwggIiMA0GCSqGSIb3DQEB
                    AQUAA4ICDwAwggIKAoICAQCt6CRz9BQ385ueK1coHIe+3LffOJCMbjzmV6B493XC
                    ov71am72AE8o295ohmxEk7axY/0UEmu/H9LqMZshftEzPLpI9d1537O4/xLxIZpL
                    wYqGcWlKZmZsj348cL+tKSIG8+TA5oCu4kuPt5l+lAOf00eXfJlII1PoOK5PCm+D
                    LtFJV4yAdLbaL9A4jXsDcCEbdfIwPPqPrt3aY6vrFk/CjhFLfs8L6P+1dy70sntK
                    4EwSJQxwjQMpoOFTJOwT2e4ZvxCzSow/iaNhUd6shweU9GNx7C7ib1uYgeGJXDR5
                    bHbvO5BieebbpJovJsXQEOEO3tkQjhb7t/eo98flAgeYjzYIlefiN5YNNnWe+w5y
                    sR2bvAP5SQXYgd0FtCrWQemsAXaVCg/Y39W9Eh81LygXbNKYwagJZHduRze6zqxZ
                    Xmidf3LWicUGQSk+WT7dJvUkyRGnWqNMQB9GoZm1pzpRboY7nn1ypxIFeFntPlF4
                    FQsDj43QLwWyPntKHEtzBRL8xurgUBN8Q5N0s8p0544fAQjQMNRbcTa0B7rBMDBc
                    SLeCO5imfWCKoqMpgsy6vYMEG6KDA0Gh1gXxG8K28Kh8hjtGqEgqiNx2mna/H2ql
                    PRmP6zjzZN7IKw0KKP/32+IVQtQi0Cdd4Xn+GOdwiK1O5tmLOsbdJ1Fu/7xk9TND
                    TwIDAQABo4IBRjCCAUIwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw
                    SwYIKwYBBQUHAQEEPzA9MDsGCCsGAQUFBzAChi9odHRwOi8vYXBwcy5pZGVudHJ1
                    c3QuY29tL3Jvb3RzL2RzdHJvb3RjYXgzLnA3YzAfBgNVHSMEGDAWgBTEp7Gkeyxx
                    +tvhS5B1/8QVYIWJEDBUBgNVHSAETTBLMAgGBmeBDAECATA/BgsrBgEEAYLfEwEB
                    ATAwMC4GCCsGAQUFBwIBFiJodHRwOi8vY3BzLnJvb3QteDEubGV0c2VuY3J5cHQu
                    b3JnMDwGA1UdHwQ1MDMwMaAvoC2GK2h0dHA6Ly9jcmwuaWRlbnRydXN0LmNvbS9E
                    U1RST09UQ0FYM0NSTC5jcmwwHQYDVR0OBBYEFHm0WeZ7tuXkAXOACIjIGlj26Ztu
                    MA0GCSqGSIb3DQEBCwUAA4IBAQAKcwBslm7/DlLQrt2M51oGrS+o44+/yQoDFVDC
                    5WxCu2+b9LRPwkSICHXM6webFGJueN7sJ7o5XPWioW5WlHAQU7G75K/QosMrAdSW
                    9MUgNTP52GE24HGNtLi1qoJFlcDyqSMo59ahy2cI2qBDLKobkx/J3vWraV0T9VuG
                    WCLKTVXkcGdtwlfFRjlBz4pYg1htmf5X6DYO8A4jqv2Il9DjXA6USbW1FzXSLr9O
                    he8Y4IWS6wY7bCkjCWDcRQJMEhg76fsO3txE+FiYruq9RUWhiF1myv4Q6W+CyBFC
                    Dfvp7OOGAN6dEOM4+qR9sdjoSYKEBpsr6GtPAQw4dy753ec5
                    -----END CERTIFICATE-----

                auth:
                  token: "{{ .metadatasoreauthtoken }}"

          ootb_supply_chain_testing_scanning:
            supported_workloads:
            - type: web
              cluster_config_template_name: config-template
            - type: server
              cluster_config_template_name: server-template
            - type: worker
              cluster_config_template_name: worker-template
            - type: server-with-git-annotation
              cluster_config_template_name: server-with-git-sha-template
            - type: server-with-sso
              cluster_config_template_name: server-with-sso-template
            - type: server-sre
              cluster_config_template_name: server-sre-template

          ootb_templates:
            excluded_templates:
            - kaniko-build
            - git-writer
            carvel_package:
              parameters:
                - selector:
                    matchLabels:
                      apps.tanzu.vmware.com/workload-type: server
                  schema: |
                    #@data/values-schema
                    ---
                    #@schema/title "Workload name"
                    #@schema/example "tanzu-java-web-app"
                    #@schema/validation min_len=1
                    workload_name: ""

                    #@schema/title "Replicas"
                    replicas: 1

                    #@schema/title "Port"
                    port: 8080

                    #@schema/title "Hostname"
                    #@schema/example "app.tanzu.vmware.com"
                    hostname: ""

                    #@schema/title "Cluster Issuer"
                    cluster_issuer: "tap-ingress-selfsigned"

                    #@schema/nullable
                    http_route:
                        #@schema/default [{"protocol": "https", "name": "default-gateway"}]
                        gateways:
                        - protocol: ""
                          name: ""
                  overlays: |
                    #@ load("@ytt:overlay", "overlay")
                    #@ load("@ytt:data", "data")

                    #@overlay/match by=overlay.subset({"apiVersion":"apps/v1", "kind": "Deployment"})
                    ---
                    spec:
                      #@overlay/match missing_ok=True
                      replicas: #@ data.values.replicas

                    #@ if data.values.http_route != None:
                    ---
                    apiVersion: gateway.networking.k8s.io/v1beta1
                    kind: HTTPRoute
                    metadata:
                      name: #@ data.values.workload_name + "-route"
                      labels:
                        app.kubernetes.io/part-of: #@ data.values.workload_name
                        carto.run/workload-name:  #@ data.values.workload_name
                    spec:
                      parentRefs:
                      #@ for/end gateway in data.values.http_route.gateways:
                      - group: gateway.networking.k8s.io
                        kind: Gateway
                        name: #@ gateway.name
                        sectionName: #@ gateway.protocol + "-" + data.values.workload_name
                      rules:
                      - backendRefs:
                        - name: #@ data.values.workload_name
                          port: #@ data.values.port
                    #@ elif data.values.hostname != "":
                    ---
                    apiVersion: networking.k8s.io/v1
                    kind: Ingress
                    metadata:
                      name: #@ data.values.workload_name
                      annotations:
                        cert-manager.io/cluster-issuer:  #@ data.values.cluster_issuer
                        ingress.kubernetes.io/force-ssl-redirect: "true"
                        kubernetes.io/ingress.class: contour
                        kapp.k14s.io/change-rule: "upsert after upserting Services"
                      labels:
                        app.kubernetes.io/part-of: #@ data.values.workload_name
                        app.kubernetes.io/component: "run"
                        carto.run/workload-name:  #@ data.values.workload_name
                    spec:
                      tls:
                        - secretName: #@ data.values.workload_name
                          hosts:
                          - #@ data.values.hostname
                      rules:
                      - host: #@ data.values.hostname
                        http:
                          paths:
                          - pathType: Prefix
                            path: /
                            backend:
                              service:
                                name: #@ data.values.workload_name
                                port:
                                  number: #@ data.values.port
                    #@ end
                - selector:
                    matchLabels:
                      apps.tanzu.vmware.com/workload-type: web
                  schema: |
                    #@data/values-schema
                    ---
                    #@schema/validation min_len=1
                    workload_name: ""
                  overlays: ""
                - selector:
                    matchLabels:
                      apps.tanzu.vmware.com/workload-type: worker
                  schema: |
                    #@data/values-schema
                    ---
                    #@schema/validation min_len=1
                    workload_name: ""
                    replicas: 1
                  overlays: |
                    #@ load("@ytt:overlay", "overlay")
                    #@ load("@ytt:data", "data")
                    #@overlay/match by=overlay.subset({"apiVersion":"apps/v1", "kind": "Deployment"})
                    ---
                    spec:
                      #@overlay/match missing_ok=True
                      replicas: #@ data.values.replicas
                - selector:
                    matchLabels:
                      apps.tanzu.vmware.com/workload-type: server-sre
                  schema: |
                    #@data/values-schema
                    ---
                    #@schema/title "Workload name"
                    #@schema/example "tanzu-java-web-app"
                    #@schema/validation min_len=1
                    workload_name: ""

                    #@schema/title "Pod Disruption Budget"
                    #@schema/description "https://kubernetes.io/docs/tasks/run-application/configure-pdb/"
                    #@schema/nullable
                    pdb:
                      #@schema/title "minAvailable"
                      #@schema/description ""
                      minAvailable: 60%
                      #@schema/title "enabled"
                      #@schema/description "Enabled PDB to be created if set to true. Default is false."
                      enabled: false

                    #@schema/title "Horizontal Pod Autoscaler"
                    #@schema/description "https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/"
                    #@schema/nullable
                    hpa:
                      #@schema/title "minAvailable"
                      #@schema/description "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. Default is 1"
                      minReplicas: 1
                      #@schema/title "maxAvailable"
                      #@schema/description "maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas. Default is 5"
                      maxReplicas: 5 
                      #@schema/title "enabled"
                      #@schema/description "Enabled HPA to be created if set to true. Default is false. Default is false."
                      enabled: false
                      #@schema/title "enabled"
                      #@schema/description "metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used). Defaults to CPU at 80% utilization."
                      #@schema/type any=True
                      metrics:
                      - type: Resource
                        resource:
                          name: cpu
                          target:
                            type: Utilization
                            averageUtilization: 80                    

                    #@schema/title "Replicas"
                    replicas: 1

                    #@schema/title "Port"
                    port: 8080

                    #@schema/title "Hostname"
                    #@schema/example "app.tanzu.vmware.com"
                    hostname: ""

                    #@schema/title "Cluster Issuer"
                    cluster_issuer: "tap-ingress-selfsigned"

                    #@schema/nullable
                    http_route:
                        #@schema/default [{"protocol": "https", "name": "default-gateway"}]
                        gateways:
                        - protocol: ""
                          name: ""
                  overlays: |
                    #@ load("@ytt:overlay", "overlay")
                    #@ load("@ytt:data", "data")

                    #@ def param(key):
                    #@   if not key in data.values.params:
                    #@     return None
                    #@   end
                    #@   return data.values.params[key]
                    #@ end

                    #@overlay/match by=overlay.subset({"apiVersion":"apps/v1", "kind": "Deployment"})
                    ---
                    spec:
                      #@overlay/match missing_ok=True
                      replicas: #@ data.values.replicas

                    #@ if hasattr(data.values, "pdb") and hasattr(data.values.pdb, "enabled") and data.values.pdb.enabled == True:
                    ---
                    apiVersion: policy/v1
                    kind: PodDisruptionBudget
                    metadata:
                      name: #@ data.values.workload_name + "-pdb"
                    spec:
                      minAvailable: #@ data.values.pdb.minAvailable
                      selector:
                        matchLabels:
                          app: #@ data.values.workload_name
                          
                    #@ end

                    #@ if hasattr(data.values, "hpa") and hasattr(data.values.hpa, "enabled") and data.values.hpa.enabled == True:
                    ---
                    apiVersion: kapp.k14s.io/v1alpha1
                    kind: Config
                    rebaseRules:
                      - path: [spec, replicas]
                        type: copy
                        sources: [existing, new]
                        resourceMatchers:
                          - apiGroupKindMatcher: {apiGroup: apps, kind: Deployment}
                    ---
                    apiVersion: autoscaling/v2
                    kind: HorizontalPodAutoscaler
                    metadata:
                      name: #@ data.values.workload_name 
                    spec:
                      scaleTargetRef:
                        apiVersion: apps/v1
                        kind: Deployment
                        name: #@ data.values.workload_name 
                      minReplicas: #@ data.values.hpa.minReplicas
                      maxReplicas: #@ data.values.hpa.maxReplicas
                      metrics: #@ data.values.hpa.metrics
                    #@ end

                    #@ if data.values.http_route != None:
                    ---
                    apiVersion: gateway.networking.k8s.io/v1beta1
                    kind: HTTPRoute
                    metadata:
                      name: #@ data.values.workload_name + "-route"
                      labels:
                        app.kubernetes.io/part-of: #@ data.values.workload_name
                        carto.run/workload-name:  #@ data.values.workload_name
                    spec:
                      parentRefs:
                      #@ for/end gateway in data.values.http_route.gateways:
                      - group: gateway.networking.k8s.io
                        kind: Gateway
                        name: #@ gateway.name
                        sectionName: #@ gateway.protocol + "-" + data.values.workload_name
                      rules:
                      - backendRefs:
                        - name: #@ data.values.workload_name
                          port: #@ data.values.port
                    #@ elif data.values.hostname != "":
                    ---
                    apiVersion: networking.k8s.io/v1
                    kind: Ingress
                    metadata:
                      name: #@ data.values.workload_name
                      annotations:
                        cert-manager.io/cluster-issuer:  #@ data.values.cluster_issuer
                        ingress.kubernetes.io/force-ssl-redirect: "true"
                        kubernetes.io/ingress.class: contour
                        kapp.k14s.io/change-rule: "upsert after upserting Services"
                      labels:
                        app.kubernetes.io/part-of: #@ data.values.workload_name
                        app.kubernetes.io/component: "run"
                        carto.run/workload-name:  #@ data.values.workload_name
                    spec:
                      tls:
                        - secretName: #@ data.values.workload_name
                          hosts:
                          - #@ data.values.hostname
                      rules:
                      - host: #@ data.values.hostname
                        http:
                          paths:
                          - pathType: Prefix
                            path: /
                            backend:
                              service:
                                name: #@ data.values.workload_name
                                port:
                                  number: #@ data.values.port
                    #@ end
          
          namespace_provisioner:
            controller: false
            default_parameters:
              skip_grype: true
              supply_chain_service_account:
                secrets:
                - tap-registry
                - tenant-gitops-ssh
                - git-credentials
                - cosign
                - oci-store
            additional_sources:
            - git:
                url: ssh://git@github.com/Mpluya/tap-namespaces-azure
                ref: origin/main
                subPath: additional-resources
                secretRef:
                  name: tap-install-gitops-ssh-too
                  namespace: tap-install
                  create_export: true
              path: _ytt_lib/custom-resources-generic
            - git:
                url: ssh://git@github.com/Mpluya/tap-namespaces-azure
                ref: origin/main
                subPath: additional-resources-build
                secretRef:
                  name: tap-install-gitops-ssh-too
                  namespace: tap-install
              path: _ytt_lib/custom-resources-build
            - git:
                url: ssh://git@github.com/Mpluya/tap-namespaces-azure
                ref: origin/main
                subPath: tanzu-supply-chain
                secretRef:
                  name: tap-install-gitops-ssh-too
                  namespace: tap-install
              path: _ytt_lib/tanzu-supply-chain
            gitops_install:
              ref: origin/main
              subPath: ns-provisioner-base-build
              url: ssh://git@github.com/Mpluya/tap-namespaces-azure
              secretRef:
                name: tap-install-gitops-ssh
                namespace: tap-install
            # overlay_secrets:
            # - name: workload-git-ssh-overlay
            #   namespace: tap-install
            #   create_export: true    

          package_overlays:
          - name: ootb-supply-chain-testing-scanning
            secrets: 
            - name: ootb-supply-chain-overlay
          - name: ootb-templates
            secrets: 
            - name: ootb-template-overlay
            - name: tekton-source-pipeline-run-template-overlay
            - name: convention-template-overlay
          - name: fluxcd-source-controller
            secrets:
            - name: fluxcd-source-overlay        
          - name: tekton-pipelines
            secrets:
              - name: tekton-pipelines-overlay
  data:
  - secretKey: tapregistrypassword
    remoteRef:
      key: tapregistrypassword
