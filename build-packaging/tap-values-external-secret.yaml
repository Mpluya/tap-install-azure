apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: tap-values
  namespace: tap-install
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: SecretStore
    name: azure-secret-store

  target:
    name: tap-values
    creationPolicy: Owner
    template:
      data:
        tap-values.yml: | 
          profile: build
          ceip_policy_disclosed: true

          shared:
            ingress_domain: build.cssa.tapsme.org
            image_registry:  
              project_path: "registry.harbor.learn.tapsme.org/tap-build"
              username: "robot$unicorn-robot"
              password: "{{ .tapregistrypassword}}"

          contour:
            envoy:
              service:
                type: ClusterIP

          supply_chain: "testing_scanning"

          ootb_supply_chain_basic:
            gitops:
              ssh_secret: "tenant-gitops-ssh"
              server_address: "ssh://git@github.com"
              repository_owner: "Mpluya"
              repository_name: "tap-azure-workload-config-repo"
              branch: main

          ootb_supply_chain_testing:
            gitops:
              ssh_secret: "tenant-gitops-ssh"
              server_address: "ssh://git@github.com"
              repository_owner: "Mpluya"
              repository_name: "tap-azure-workload-config-repo"
              branch: main

          ootb_supply_chain_testing_scanning:
            gitops:
              ssh_secret: "tenant-gitops-ssh"
              server_address: "ssh://git@github.com"
              repository_owner: "Mpluya"
              repository_name: "tap-azure-workload-config-repo"
              branch: main

          ootb_templates:
            carvel_package:
              parameters:
              - selector:
                  matchLabels:
                    apps.tanzu.vmware.com/workload-type: server
                schema: |
                  #@data/values-schema
                  ---
                  #@schema/title "Workload name"
                  #@schema/desc "Required. Name of the workload, used by K8s Ingress HTTP rules."
                  #@schema/example "tanzu-java-web-app"
                  #@schema/validation min_len=1
                  workload_name: ""

                  #@schema/title "Replicas"
                  #@schema/desc "Number of replicas."
                  replicas: 1

                  #@schema/title "Port"
                  #@schema/desc "Port number for the backend associated with K8s Ingress."
                  port: 8080

                  #@schema/title "Hostname"
                  #@schema/desc "If set, K8s Ingress will be created with HTTP rules for hostname."
                  #@schema/example "app.tanzu.vmware.com"
                  hostname: ""

                  #@schema/title "Cluster Issuer"
                  #@schema/desc "CertManager Issuer to use to generate certificate for K8s Ingress."
                  cluster_issuer: "letsencrypt-production"
                overlays: |
                  #@ load("@ytt:overlay", "overlay")
                  #@ load("@ytt:data", "data")
                  #@overlay/match by=overlay.subset({"apiVersion":"apps/v1", "kind": "Deployment"})
                  ---
                  spec:
                    #@overlay/match missing_ok=True
                    replicas: #@ data.values.replicas

                  #@ if data.values.hostname != "":
                  ---
                  apiVersion: networking.k8s.io/v1
                  kind: Ingress
                  metadata:
                    name: #@ data.values.workload_name
                    annotations:
                      cert-manager.io/cluster-issuer:  #@ data.values.cluster_issuer
                      ingress.kubernetes.io/force-ssl-redirect: "true"
                      kubernetes.io/ingress.class: contour
                      kapp.k14s.io/change-rule: "upsert after upserting Services"
                    labels:
                      app.kubernetes.io/component: "run"
                      carto.run/workload-name:  #@ data.values.workload_name
                  spec:
                    tls:
                      - secretName: #@ data.values.workload_name
                        hosts:
                        - #@ data.values.hostname
                    rules:
                    - host: #@ data.values.hostname
                      http:
                        paths:
                        - pathType: Prefix
                          path: /
                          backend:
                            service:
                              name: #@ data.values.workload_name
                              port:
                                number: #@ data.values.port
                  #@ end              
              - selector:
                  matchLabels:
                    apps.tanzu.vmware.com/workload-type: web
                schema: |
                  #@data/values-schema
                  ---
                  #@schema/validation min_len=1
                  workload_name: ""
                overlays: ""
              - selector:
                  matchLabels:
                    apps.tanzu.vmware.com/workload-type: worker
                schema: |
                  #@data/values-schema
                  ---
                  #@schema/validation min_len=1
                  workload_name: ""
                  replicas: 1
                overlays: |
                  #@ load("@ytt:overlay", "overlay")
                  #@ load("@ytt:data", "data")
                  #@overlay/match by=overlay.subset({"apiVersion":"apps/v1", "kind": "Deployment"})
                  ---
                  spec:
                    #@overlay/match missing_ok=True
                    replicas: #@ data.values.replicas

          grype:
            namespace: dev
            targetImagePullSecret: "registries-credentials"
            metadataStore:
              url: "https://metadata-store.view.cssa.tapsme.org"
              caSecret:
                name: store-ca-cert
                importFromNamespace: metadata-store-secrets
              authSecret:
                name: store-auth-token
                importFromNamespace: metadata-store-secrets

          scanning:
            metadataStore:
              url: ""

          namespace_provisioner:
            controller: false
            additional_sources:
            - git:
                url: ssh://git@github.com/Mpluya/tap-namespaces-azure
                ref: origin/main
                subPath: additional-resources
                secretRef:
                  name: tap-install-gitops-ssh-too
                  namespace: tap-install
                  create_export: true
              path: _ytt_lib/custom-resources-generic
            - git:
                url: ssh://git@github.com/Mpluya/tap-namespaces-azure
                ref: origin/main
                subPath: additional-resources-build
                secretRef:
                  name: tap-install-gitops-ssh-also
                  namespace: tap-install
                  create_export: true
              path: _ytt_lib/custom-resources-build              
            gitops_install:
              ref: origin/main
              subPath: ns
              url: ssh://git@github.com/Mpluya/tap-namespaces-azure
              secretRef:
                name: tap-install-gitops-ssh
                namespace: tap-install
            overlay_secrets:
            - name: workload-git-ssh-overlay
              namespace: tap-install
              create_export: true    

          package_overlays:
          - name: "ootb-supply-chain-testing-scanning"
            secrets: 
            - name: "ootb-supply-chain-overlay"
          - name: "ootb-templates"
            secrets: 
            - name: "ootb-template-overlay"
          
  data:
  - secretKey: tapregistrypassword
    remoteRef:
      key: tapregistrypassword
