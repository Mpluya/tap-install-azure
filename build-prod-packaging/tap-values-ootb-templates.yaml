apiVersion: v1
kind: Secret
metadata:
  name: tap-values-ootb-templates
  namespace: tap-install
stringData:
  tap-values-ootb-templates: |
    ootb_templates:
      excluded_templates:
      - kaniko-build
      carvel_package:
        parameters:
          - selector:
              matchLabels:
                apps.tanzu.vmware.com/workload-type: server
            schema: |
              #@data/values-schema
              ---
              #@schema/title "Workload name"
              #@schema/example "tanzu-java-web-app"
              #@schema/validation min_len=1
              workload_name: ""

              #@schema/title "Replicas"
              replicas: 1

              #@schema/title "Port"
              port: 8080

              #@schema/title "Hostname"
              #@schema/example "app.tanzu.vmware.com"
              hostname: ""

              #@schema/title "Cluster Issuer"
              cluster_issuer: "tap-ingress-selfsigned"

              #@schema/nullable
              http_route:
                  #@schema/default [{"protocol": "https", "name": "default-gateway"}]
                  gateways:
                  - protocol: ""
                    name: ""
            overlays: |
              #@ load("@ytt:overlay", "overlay")
              #@ load("@ytt:data", "data")

              #@overlay/match by=overlay.subset({"apiVersion":"apps/v1", "kind": "Deployment"})
              ---
              spec:
                #@overlay/match missing_ok=True
                replicas: #@ data.values.replicas

              #@ if data.values.http_route != None:
              ---
              apiVersion: gateway.networking.k8s.io/v1beta1
              kind: HTTPRoute
              metadata:
                name: #@ data.values.workload_name + "-route"
                labels:
                  app.kubernetes.io/part-of: #@ data.values.workload_name
                  carto.run/workload-name:  #@ data.values.workload_name
              spec:
                parentRefs:
                #@ for/end gateway in data.values.http_route.gateways:
                - group: gateway.networking.k8s.io
                  kind: Gateway
                  name: #@ gateway.name
                  sectionName: #@ gateway.protocol + "-" + data.values.workload_name
                rules:
                - backendRefs:
                  - name: #@ data.values.workload_name
                    port: #@ data.values.port
              #@ elif data.values.hostname != "":
              ---
              apiVersion: networking.k8s.io/v1
              kind: Ingress
              metadata:
                name: #@ data.values.workload_name
                annotations:
                  cert-manager.io/cluster-issuer:  #@ data.values.cluster_issuer
                  ingress.kubernetes.io/force-ssl-redirect: "true"
                  kubernetes.io/ingress.class: contour
                  kapp.k14s.io/change-rule: "upsert after upserting Services"
                labels:
                  app.kubernetes.io/part-of: #@ data.values.workload_name
                  app.kubernetes.io/component: "run"
                  carto.run/workload-name:  #@ data.values.workload_name
              spec:
                tls:
                  - secretName: #@ data.values.workload_name
                    hosts:
                    - #@ data.values.hostname
                rules:
                - host: #@ data.values.hostname
                  http:
                    paths:
                    - pathType: Prefix
                      path: /
                      backend:
                        service:
                          name: #@ data.values.workload_name
                          port:
                            number: #@ data.values.port
              #@ end
          - selector:
              matchLabels:
                apps.tanzu.vmware.com/workload-type: web
            schema: |
              #@data/values-schema
              ---
              #@schema/validation min_len=1
              workload_name: ""
            overlays: ""
          - selector:
              matchLabels:
                apps.tanzu.vmware.com/workload-type: worker
            schema: |
              #@data/values-schema
              ---
              #@schema/validation min_len=1
              workload_name: ""
              replicas: 1
            overlays: |
              #@ load("@ytt:overlay", "overlay")
              #@ load("@ytt:data", "data")
              #@overlay/match by=overlay.subset({"apiVersion":"apps/v1", "kind": "Deployment"})
              ---
              spec:
                #@overlay/match missing_ok=True
                replicas: #@ data.values.replicas
          - selector:
              matchLabels:
                apps.tanzu.vmware.com/workload-type: server-sre
            schema: |
              #@data/values-schema
              ---
              #@schema/title "Workload name"
              #@schema/example "tanzu-java-web-app"
              #@schema/validation min_len=1
              workload_name: ""

              #@schema/title "Pod Disruption Budget"
              #@schema/description "https://kubernetes.io/docs/tasks/run-application/configure-pdb/"
              #@schema/nullable
              pdb:
                #@schema/title "minAvailable"
                #@schema/description ""
                minAvailable: 60%
                #@schema/title "enabled"
                #@schema/description "Enabled PDB to be created if set to true. Default is false."
                enabled: false

              #@schema/title "Horizontal Pod Autoscaler"
              #@schema/description "https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/"
              #@schema/nullable
              hpa:
                #@schema/title "minAvailable"
                #@schema/description "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. Default is 1"
                minReplicas: 1
                #@schema/title "maxAvailable"
                #@schema/description "maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas. Default is 5"
                maxReplicas: 5 
                #@schema/title "enabled"
                #@schema/description "Enabled HPA to be created if set to true. Default is false. Default is false."
                enabled: false
                #@schema/title "enabled"
                #@schema/description "metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used). Defaults to CPU at 80% utilization."
                #@schema/type any=True
                metrics:
                - type: Resource
                  resource:
                    name: cpu
                    target:
                      type: Utilization
                      averageUtilization: 80                    

              #@schema/title "Replicas"
              replicas: 1

              #@schema/title "Port"
              port: 8080

              #@schema/title "Hostname"
              #@schema/example "app.tanzu.vmware.com"
              hostname: ""

              #@schema/title "Cluster Issuer"
              cluster_issuer: "tap-ingress-selfsigned"

              #@schema/nullable
              http_route:
                  #@schema/default [{"protocol": "https", "name": "default-gateway"}]
                  gateways:
                  - protocol: ""
                    name: ""
            overlays: |
              #@ load("@ytt:overlay", "overlay")
              #@ load("@ytt:data", "data")

              #@ def param(key):
              #@   if not key in data.values.params:
              #@     return None
              #@   end
              #@   return data.values.params[key]
              #@ end

              #@overlay/match by=overlay.subset({"apiVersion":"apps/v1", "kind": "Deployment"})
              ---
              spec:
                #@overlay/match missing_ok=True
                replicas: #@ data.values.replicas

              #@ if hasattr(data.values, "pdb") and hasattr(data.values.pdb, "enabled") and data.values.pdb.enabled == True:
              ---
              apiVersion: policy/v1
              kind: PodDisruptionBudget
              metadata:
                name: #@ data.values.workload_name + "-pdb"
              spec:
                minAvailable: #@ data.values.pdb.minAvailable
                selector:
                  matchLabels:
                    app: #@ data.values.workload_name
                    
              #@ end

              #@ if hasattr(data.values, "hpa") and hasattr(data.values.hpa, "enabled") and data.values.hpa.enabled == True:
              ---
              apiVersion: kapp.k14s.io/v1alpha1
              kind: Config
              rebaseRules:
                - path: [spec, replicas]
                  type: copy
                  sources: [existing, new]
                  resourceMatchers:
                    - apiGroupKindMatcher: {apiGroup: apps, kind: Deployment}
              ---
              apiVersion: autoscaling/v2
              kind: HorizontalPodAutoscaler
              metadata:
                name: #@ data.values.workload_name 
              spec:
                scaleTargetRef:
                  apiVersion: apps/v1
                  kind: Deployment
                  name: #@ data.values.workload_name 
                minReplicas: #@ data.values.hpa.minReplicas
                maxReplicas: #@ data.values.hpa.maxReplicas
                metrics: #@ data.values.hpa.metrics
              #@ end

              #@ if data.values.http_route != None:
              ---
              apiVersion: gateway.networking.k8s.io/v1beta1
              kind: HTTPRoute
              metadata:
                name: #@ data.values.workload_name + "-route"
                labels:
                  app.kubernetes.io/part-of: #@ data.values.workload_name
                  carto.run/workload-name:  #@ data.values.workload_name
              spec:
                parentRefs:
                #@ for/end gateway in data.values.http_route.gateways:
                - group: gateway.networking.k8s.io
                  kind: Gateway
                  name: #@ gateway.name
                  sectionName: #@ gateway.protocol + "-" + data.values.workload_name
                rules:
                - backendRefs:
                  - name: #@ data.values.workload_name
                    port: #@ data.values.port
              #@ elif data.values.hostname != "":
              ---
              apiVersion: networking.k8s.io/v1
              kind: Ingress
              metadata:
                name: #@ data.values.workload_name
                annotations:
                  cert-manager.io/cluster-issuer:  #@ data.values.cluster_issuer
                  ingress.kubernetes.io/force-ssl-redirect: "true"
                  kubernetes.io/ingress.class: contour
                  kapp.k14s.io/change-rule: "upsert after upserting Services"
                labels:
                  app.kubernetes.io/part-of: #@ data.values.workload_name
                  app.kubernetes.io/component: "run"
                  carto.run/workload-name:  #@ data.values.workload_name
              spec:
                tls:
                  - secretName: #@ data.values.workload_name
                    hosts:
                    - #@ data.values.hostname
                rules:
                - host: #@ data.values.hostname
                  http:
                    paths:
                    - pathType: Prefix
                      path: /
                      backend:
                        service:
                          name: #@ data.values.workload_name
                          port:
                            number: #@ data.values.port
              #@ end